name: Release and Docker Build

on:
  push:
    branches:
      - test
    tags:
      - 'v*'

permissions:
  contents: write
  
jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    # 只在推送tag时运行release job
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build binaries
        run: |
          mkdir -p build/release
          # Linux amd64
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=${{ env.VERSION }} -w -s" -o build/release/proxypool-linux-amd64 cmd/main.go
          # Linux arm64
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=${{ env.VERSION }} -w -s" -o build/release/proxypool-linux-arm64 cmd/main.go
          # Windows amd64
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=${{ env.VERSION }} -w -s" -o build/release/proxypool-windows-amd64.exe cmd/main.go
          # macOS amd64
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=${{ env.VERSION }} -w -s" -o build/release/proxypool-darwin-amd64 cmd/main.go
          # macOS arm64
          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=${{ env.VERSION }} -w -s" -o build/release/proxypool-darwin-arm64 cmd/main.go
          
          cd build/release
          
          # Linux AMD64
          mkdir -p linux-amd64/data
          cp ../../config/config.toml linux-amd64/data/
          mv proxypool-linux-amd64 linux-amd64/
          zip -r proxypool-linux-amd64.zip linux-amd64/
          
          # Linux ARM64
          mkdir -p linux-arm64/data
          cp ../../config/config.toml linux-arm64/data/
          mv proxypool-linux-arm64 linux-arm64/
          zip -r proxypool-linux-arm64.zip linux-arm64/
          
          # Windows AMD64
          mkdir -p windows-amd64/data
          cp ../../config/config.toml windows-amd64/data/
          mv proxypool-windows-amd64.exe windows-amd64/
          zip -r proxypool-windows-amd64.zip windows-amd64/
          
          # macOS AMD64
          mkdir -p darwin-amd64/data
          cp ../../config/config.toml darwin-amd64/data/
          mv proxypool-darwin-amd64 darwin-amd64/
          zip -r proxypool-darwin-amd64.zip darwin-amd64/
          
          # macOS ARM64
          mkdir -p darwin-arm64/data
          cp ../../config/config.toml darwin-arm64/data/
          mv proxypool-darwin-arm64 darwin-arm64/
          zip -r proxypool-darwin-arm64.zip darwin-arm64/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ProxyPool ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            build/release/proxypool-linux-amd64.zip
            build/release/proxypool-linux-arm64.zip
            build/release/proxypool-windows-amd64.zip
            build/release/proxypool-darwin-amd64.zip
            build/release/proxypool-darwin-arm64.zip
          body: |
            ## ProxyPool ${{ github.ref_name }} 发布说明
            
            ### 支持平台
            - Linux (amd64, arm64)
            - Windows (amd64)
            - macOS (amd64, arm64)
            
            ### 环境依赖
            - Redis 服务（必需）
            
            ### Redis 服务部署建议
            
            1. 使用 Docker 运行 Redis（推荐）：
            ```bash
            docker pull redis:latest
            docker run -d --name redis -p 6379:6379 redis:latest
            ```
            
            2. 或直接安装 Redis：
            - Linux: `apt install redis-server` 或 `yum install redis`
            - macOS: `brew install redis`
            - Windows: 从 Redis 官网下载安装包
            
            ### 使用说明
            1. 确保 Redis 服务已启动
            2. 下载对应平台的压缩包
            3. 解压后进入目录
            4. 配置文件位于 `data/config.toml`，按需修改 Redis 连接信息
            5. 运行可执行文件启动服务

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    # 在release job完成后运行，但只在推送tag时运行
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Check Docker Login
        run: |
          echo "Testing Docker login..."
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin <<< ${{ secrets.DOCKERHUB_TOKEN }}
          echo "Docker login successful"
          
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: docker.io/langchou/proxypool
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'test') }}
            
      - name: Show Docker Tags
        run: |
          echo "Will push the following tags:"
          echo "${{ steps.meta.outputs.tags }}"
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-test:
    name: Build and Push Test Docker Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Verify Docker Hub Login
        run: |
          echo "Checking Docker Hub login status..."
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          echo "Checking if repository exists..."
          docker search ${{ secrets.DOCKERHUB_USERNAME }}/proxypool
          
      - name: Debug Info
        run: |
          echo "Current ref: ${{ github.ref }}"
          echo "Docker username: ${{ secrets.DOCKERHUB_USERNAME }}"
          echo "Token length: ${#DOCKER_TOKEN}"
          echo "Repository: ${{ secrets.DOCKERHUB_USERNAME }}/proxypool"
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/proxypool:test
          cache-from: type=gha
          cache-to: type=gha,mode=max